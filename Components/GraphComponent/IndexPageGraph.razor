<MudDialog>
    <DialogContent>
        <MudChart ChartType="ChartType.StackedBar" ChartSeries="@Series"
                  @bind-SelectedIndex="Index"
                  XAxisLabels="@XAxisLabels"
                  Width="90%"
                  Height="350px">
        </MudChart>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Inject] public StreakService service { get; set; } = null!;
    [Inject] public NavigationManager navManager { get; set; } = null!;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    List<List<ToDo>> dayWithToDoList = new();

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (service.CurrentUser is null)
            {
                navManager.NavigateTo("/");
            }
            if (service.CureentChallenge is null)
            {
                navManager.NavigateTo("challenge");
            }
            var allTodo = (await service.GetToDosAsync(service.CureentChallenge)).ToList();
            for (var i = 0; i < service.CureentChallenge.DayCount; i++)
            {
                dayWithToDoList.Add(allTodo.Where(x => x.DayNumber == i).ToList());
            }
            var data = new List<double>();
            for (var i = 0; i < dayWithToDoList.Count; i++)
            {
                int temp = 0;
                foreach (var j in dayWithToDoList[i])
                {
                    if (j.IsCompleted) temp++;
                }
                data.Add(temp);
            }
            Series.Add(new ChartSeries()
                {
                    Name = service.CurrentUser.UserName + " " + service.CureentChallenge.Name,
                    Data = data.ToArray()
                });
            XAxisLabels = Enumerable.Range(0, data.Count).Select(x => $" Day {x.ToString()}").ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error No User Selected {ex.Message}");
        }
        
    }
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new();

    public string[] XAxisLabels=new string[0];
}